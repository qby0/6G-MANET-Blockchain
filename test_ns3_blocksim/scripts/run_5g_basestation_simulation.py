#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ NS-3 —Å–∏–º—É–ª—è—Ü–∏–∏ 5G –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ —Å MANET –∏ –±–ª–æ–∫—á–µ–π–Ω–æ–º.
–û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —É–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ C++ —Å–∏–º—É–ª—è—Ü–∏–∏ –∏–∑ NS-3.
"""
import argparse
import json
import logging
import os
import subprocess
import sys
import time
from pathlib import Path

# Setup logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()],
)
logger = logging.getLogger("5GBasestationSimulation")


def find_ns3_path():
    """
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—É—Ç—å –∫ NS-3 –≤ –ø—Ä–æ–µ–∫—Ç–µ.
    
    Returns:
        str: –ü—É—Ç—å –∫ NS-3 –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω
    """
    current_script = Path(__file__)
    project_root = current_script.parent.parent
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–Ω–µ—à–Ω–∏–π NS-3
    ns3_path = project_root / "external" / "ns-3"
    if ns3_path.exists() and (ns3_path / "ns3").exists():
        logger.info(f"Found NS-3 at: {ns3_path}")
        return str(ns3_path)
    
    logger.error("NS-3 not found in project")
    return None


def parse_arguments():
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏."""
    parser = argparse.ArgumentParser(
        description="5G Base Station + MANET + Blockchain Simulation"
    )
    
    parser.add_argument(
        "--nodes", 
        type=int, 
        default=16, 
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ MANET —É–∑–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 16)"
    )
    parser.add_argument(
        "--duration", 
        type=float, 
        default=45.0, 
        help="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 45)"
    )
    parser.add_argument(
        "--basestation-range", 
        type=float, 
        default=300.0, 
        help="–†–∞–¥–∏—É—Å –ø–æ–∫—Ä—ã—Ç–∏—è 5G –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –≤ –º–µ—Ç—Ä–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 300)"
    )
    parser.add_argument(
        "--output-file", 
        type=str, 
        default="", 
        help="–ò–º—è —Ñ–∞–π–ª–∞ NetAnim –∞–Ω–∏–º–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: auto-generated)"
    )
    parser.add_argument(
        "--ns3-path", 
        type=str, 
        default="", 
        help="–ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ NS-3 (–∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ)"
    )
    parser.add_argument(
        "--output-dir", 
        type=str, 
        default="../results/5g_basestation", 
        help="Directory for saving results"
    )
    parser.add_argument(
        "--debug", 
        action="store_true", 
        help="Enable debug messages"
    )
    parser.add_argument(
        "--quick", 
        action="store_true", 
        help="Quick simulation (15 sec, 8 nodes)"
    )
    
    return parser.parse_args()


def prepare_output_paths(args):
    """Prepare paths for output files."""
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    
    # Create results directory relative to current script
    current_script = Path(__file__)
    project_root = current_script.parent.parent
    
    # Determine absolute path to results directory
    if args.output_dir.startswith("../"):
        output_dir = project_root / args.output_dir[3:]  # Remove "../"
    else:
        output_dir = Path(args.output_dir)
    
    output_dir.mkdir(parents=True, exist_ok=True)
    
    # Generate animation filename if not specified
    if not args.output_file:
        animation_file = f"5g_basestation_sim_{timestamp}.xml"
    else:
        animation_file = args.output_file
    
    # Full absolute path to animation file
    animation_path = output_dir / animation_file
    
    return str(animation_path.absolute()), str(output_dir.absolute())


def run_ns3_simulation(ns3_path, args, animation_path):
    """Run NS-3 simulation."""
    logger.info("Starting NS-3 5G Base Station simulation...")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é NS-3
    original_cwd = os.getcwd()
    os.chdir(ns3_path)
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
        cmd = [
            "./ns3", "run",
            f"scratch/simple-manet-5g-basestation",
            "--",
            f"--nNodes={args.nodes}",
            f"--simulationTime={args.duration}",
            f"--bsRange={args.basestation_range}",
            f"--outputFile={animation_path}"
        ]
        
        logger.info(f"Running command: {' '.join(cmd)}")
        logger.info(f"Parameters:")
        logger.info(f"  - MANET Nodes: {args.nodes}")
        logger.info(f"  - Duration: {args.duration} seconds")
        logger.info(f"  - 5G Base Station Range: {args.basestation_range}m")
        logger.info(f"  - Animation File: {animation_path}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
        result = subprocess.run(
            cmd, 
            capture_output=True, 
            text=True, 
            timeout=args.duration + 60  # –î–æ–±–∞–≤–ª—è–µ–º –±—É—Ñ–µ—Ä –≤—Ä–µ–º–µ–Ω–∏
        )
        
        if result.returncode == 0:
            logger.info("NS-3 simulation completed successfully!")
            if result.stdout:
                print("\n" + "="*60)
                print("SIMULATION OUTPUT:")
                print("="*60)
                print(result.stdout)
        else:
            logger.error(f"NS-3 simulation failed with return code: {result.returncode}")
            if result.stderr:
                logger.error(f"Error output: {result.stderr}")
            return False
        
        return True
        
    except subprocess.TimeoutExpired:
        logger.error(f"Simulation timed out after {args.duration + 60} seconds")
        return False
    except Exception as e:
        logger.error(f"Error running NS-3 simulation: {e}")
        return False
    finally:
        os.chdir(original_cwd)


def save_simulation_summary(args, animation_path, output_dir, success):
    """Save simulation summary."""
    timestamp = time.strftime("%Y%m%d-%H%M%S")
    
    summary = {
        "timestamp": timestamp,
        "simulation_type": "5G_Base_Station_MANET_Blockchain",
        "parameters": {
            "nodes": args.nodes,
            "duration": args.duration,
            "basestation_range": args.basestation_range,
            "validators_percentage": 25  # –ò–∑ –∫–æ–¥–∞ C++
        },
        "files": {
            "animation_file": animation_path if success else None,
            "output_directory": output_dir
        },
        "success": success,
        "features": [
            "5G microcell base station (300m range)",
            "MANET with WiFi ad-hoc connectivity", 
            "AODV routing protocol",
            "Blockchain with 25% validator nodes",
            "Real-time 5G coverage visualization",
            "Energy consumption tracking",
            "Dynamic load balancing"
        ]
    }
    
    summary_file = Path(output_dir) / f"summary_{timestamp}.json"
    
    try:
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump(summary, f, indent=2)
        logger.info(f"Simulation summary saved to: {summary_file}")
    except Exception as e:
        logger.error(f"Failed to save summary: {e}")


def main():
    """Main function."""
    args = parse_arguments()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.debug:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # –ë—ã—Å—Ç—Ä–∞—è —Å–∏–º—É–ª—è—Ü–∏—è
    if args.quick:
        args.nodes = 8
        args.duration = 15.0
        args.basestation_range = 250.0
        logger.info("Quick simulation mode: 8 nodes, 15 seconds, 250m range")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ NS-3
    ns3_path = args.ns3_path if args.ns3_path else find_ns3_path()
    if not ns3_path:
        logger.error("NS-3 not found. Please specify --ns3-path or install NS-3 in external/ns-3")
        return 1
    
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç–∏
    animation_path, output_dir = prepare_output_paths(args)
    
    logger.info("üé¨ Starting 5G Base Station + MANET + Blockchain Simulation")
    logger.info("=" * 65)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    success = run_ns3_simulation(ns3_path, args, animation_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—é–º–µ
    save_simulation_summary(args, animation_path, output_dir, success)
    
    if success:
        logger.info("\n‚úÖ Simulation completed successfully!")
        logger.info(f"üìÅ Results saved to: {output_dir}")
        logger.info(f"üéûÔ∏è  Animation file: {animation_path}")
        logger.info("\nüöÄ To view animation:")
        logger.info(f"   1. Install NetAnim viewer")
        logger.info(f"   2. Open: {animation_path}")
        logger.info("\nüìä Features visualized:")
        logger.info("   ‚Ä¢ 5G base station coverage area")
        logger.info("   ‚Ä¢ Node mobility and MANET connectivity")
        logger.info("   ‚Ä¢ Blockchain validator activity")
        logger.info("   ‚Ä¢ Energy consumption over time")
        logger.info("   ‚Ä¢ Dynamic load balancing")
        return 0
    else:
        logger.error("\n‚ùå Simulation failed!")
        return 1


if __name__ == "__main__":
    sys.exit(main()) 