#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Integrated NS-3 and Device Simulation
–ü—Ä–∞–≤–∏–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–µ—Ç–µ–≤–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏ NS-3 —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏

–ö–ª—é—á–µ–≤—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
1. –ï–¥–∏–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —É–∑–ª–æ–≤ - –∫–∞–∂–¥—ã–π NS-3 —É–∑–µ–ª —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–º—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
2. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π - –ø–æ–∑–∏—Ü–∏—è, –∑–æ–Ω–∞, RSSI –≤–ª–∏—è—é—Ç –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
3. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å - —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–±–∞—Ç–∞—Ä–µ—è, –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å) –≤–ª–∏—è–µ—Ç –Ω–∞ NS-3
4. –ï–¥–∏–Ω–æ–µ –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏ - –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
"""

import os
import sys
import time
import json
import logging
import threading
import subprocess
from pathlib import Path
from typing import Dict, List, Optional, Tuple, Any
from dataclasses import dataclass, asdict
import numpy as np
import queue
import pandas as pd
import xml.etree.ElementTree as ET
import csv

# Add project root to path
project_root = Path(__file__).parent.parent.parent
sys.path.append(str(project_root))

from models.realistic_device_manager import RealisticDeviceManager, DeviceCapabilities
from scripts.run_advanced_cross_zone_simulation import AdvancedCrossZoneRunner

logger = logging.getLogger(__name__)

@dataclass
class IntegratedNodeState:
    """–°–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞ (NS-3 + —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ)"""
    # NS-3 –¥–∞–Ω–Ω—ã–µ
    ns3_node_id: int
    position: Tuple[float, float, float]
    zone: int  # 0=6G, 1=Bridge, 2=MANET
    rssi_6g: float
    mobility_speed: float
    
    # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã–µ
    device_type: str
    capabilities: DeviceCapabilities
    battery_level: float
    energy_consumed: float
    cpu_load: float
    memory_usage: float
    
    # –ë–ª–æ–∫—á–µ–π–Ω –¥–∞–Ω–Ω—ã–µ
    is_validator: bool
    transactions_sent: int
    blocks_validated: int
    consensus_participation: float
    
    # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    network_latency: float
    packet_loss: float
    throughput: float

@dataclass
class IntegrationConfig:
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
    duration: float = 180.0
    time_step: float = 1.0
    sync_interval: float = 5.0
    enable_real_time: bool = False
    enable_feedback: bool = True
    log_level: str = "INFO"
    ns3_directory: str = ""

class IntegratedNS3DeviceSimulation:
    """
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏–º—É–ª—è—Ü–∏—è NS-3 –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    
    –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
    1. NS-3 —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–µ—Ç–µ–≤–æ–π —Ç–æ–ø–æ–ª–æ–≥–∏–µ–π –∏ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å—é
    2. DeviceManager —É–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏
    3. –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∫–∞–∂–¥—ã–µ sync_interval —Å–µ–∫—É–Ω–¥
    4. –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å: —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–ª–∏—è–µ—Ç –Ω–∞ NS-3 –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    """
    
    def __init__(self, config: IntegrationConfig):
        self.config = config
        self.logger = logging.getLogger("IntegratedSimulation")
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.ns3_runner: Optional[AdvancedCrossZoneRunner] = None
        self.device_manager: Optional[RealisticDeviceManager] = None
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏
        self.nodes: Dict[int, IntegratedNodeState] = {}
        self.simulation_time: float = 0.0
        self.running: bool = False
        
        # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
        self.sync_queue = queue.Queue()
        self.ns3_thread: Optional[threading.Thread] = None
        self.sync_thread: Optional[threading.Thread] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'sync_events': 0,
            'state_updates': 0,
            'feedback_events': 0,
            'zone_transitions': 0,
            'validator_changes': 0,
            'real_data_reads': 0
        }
        
        # NS-3 data sources
        self.ns3_dir = config.ns3_directory if hasattr(config, 'ns3_directory') else "external/ns-3"
        self.positions_file = os.path.join(self.ns3_dir, "output/node_positions.csv")
        self.flowmon_file = os.path.join(self.ns3_dir, "output/flow-monitor.xml")
        
        # Storage for real NS-3 data
        self.position_data = {}  # time -> {node_id: (x, y, z)}
        self.flow_data = {}      # flow_id -> flow_stats
        self.last_sync_time = 0.0
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger.setLevel(getattr(logging, config.log_level))
        
        if not self.logger.handlers:
            handler = logging.StreamHandler()
            formatter = logging.Formatter(
                '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
            )
            handler.setFormatter(formatter)
            self.logger.addHandler(handler)
    
    def initialize(self, ns3_config: Dict[str, Any], device_config: Dict[str, Any]):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.logger.info("üîß Initializing integrated NS-3 + Device simulation")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NS-3
        self._initialize_ns3(ns3_config)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        self._initialize_devices(device_config)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤
        self._create_integrated_nodes()
        
        self.logger.info(f"‚úÖ Initialized {len(self.nodes)} integrated nodes")
    
    def _initialize_ns3(self, config: Dict[str, Any]):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è NS-3 –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞"""
        self.ns3_runner = AdvancedCrossZoneRunner(
            manet_nodes=config.get('manet_nodes', 40),
            fiveg_nodes=config.get('fiveg_nodes', 2),
            bridge_nodes=config.get('bridge_nodes', 14),
            simulation_time=self.config.duration,
            fiveg_radius=config.get('fiveg_radius', 150.0),
            min_validators=config.get('min_validators', 3),
            max_validators=config.get('max_validators', 7),
            enable_consensus=True
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NS-3 –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–û–ô –¥–∏–Ω–∞–º–∏–∫–æ–π –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
        self.ns3_runner.setup_environment()
        
        # –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø –í–ê–õ–ò–î–ê–¢–û–†–û–í
        if hasattr(self.ns3_runner, 'validator_manager') and self.ns3_runner.validator_manager:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤–∞–ª–∏–¥–∞—Ç–æ—Ä-–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã
            self.ns3_runner.validator_manager.config.update({
                "rssi_leave_threshold": -85.0,     # –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã –¥–æ–ª—å—à–µ –æ—Å—Ç–∞—é—Ç—Å—è
                "rssi_enter_threshold": -75.0,     # –õ–µ–≥—á–µ —Å—Ç–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
                "battery_threshold": 0.1,          # 10% –ø–æ—Ä–æ–≥ –±–∞—Ç–∞—Ä–µ–∏
                "heartbeat_interval": 10.0,        # –£–í–ï–õ–ò–ß–ï–ù–û: —Ä–µ–∂–µ –ø—Ä–æ–≤–µ—Ä–∫–∞ (–±—ã–ª–æ 8.0)
                "vote_timeout": 15.0,              # –£–ú–ï–ù–¨–®–ï–ù–û: –±—ã—Å—Ç—Ä–µ–µ –∫–æ–Ω—Å–µ–Ω—Å—É—Å (–±—ã–ª–æ 20.0)
                "enable_rotation": True,           
                "rotation_interval": 120.0,        # –£–í–ï–õ–ò–ß–ï–ù–û: —Ä–æ—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã (–±—ã–ª–æ 60)
                "performance_window": 180.0,       # –£–≤–µ–ª–∏—á–µ–Ω–æ –æ–∫–Ω–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                "consensus_threshold": 0.6,        # –õ–µ–≥—á–µ –¥–æ—Å—Ç–∏—á—å –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
                "min_validators": 3,
                "max_validators": 6,               # –£–ú–ï–ù–¨–®–ï–ù–û: –º–µ–Ω—å—à–µ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ (–±—ã–ª–æ 8)
                "dual_radio_preference": True,
                "max_concurrent_rounds": 2         # –ù–û–í–û–ï: –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ä–∞—É–Ω–¥—ã
            })
            self.logger.info("‚úÖ Optimized validator dynamics configuration applied")
    
    def _initialize_devices(self, config: Dict[str, Any]):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        self.device_manager = RealisticDeviceManager()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        device_types = config.get('device_types', {
            'smartphone': 20,
            'iot_sensor': 15,
            'vehicle': 10,
            'base_station_6g': 2,
            'edge_server': 9
        })
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —á–µ—Ä–µ–∑ RealisticDeviceManager
        for device_type, count in device_types.items():
            for i in range(count):
                device = self.device_manager.create_device(device_type)
                # –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è—é—Ç—Å—è –≤ self.device_manager.devices
    
    def _generate_device_capabilities(self, device_type: str) -> DeviceCapabilities:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ —Ç–∏–ø—É"""
        device_id = f"{device_type}_{self._device_counter}"
        self._device_counter = getattr(self, '_device_counter', 0) + 1
        
        capabilities_map = {
            'smartphone': DeviceCapabilities(
                device_id=device_id,
                device_type=device_type,
                cpu_performance=np.random.uniform(2.0, 8.0),
                ram_gb=np.random.uniform(4.0, 12.0),
                battery_mah=int(np.random.uniform(3000, 5000)),
                network_interfaces=["wifi", "5g"],
                max_tx_power={"wifi": 20, "5g": 23},
                signatures_per_sec=int(np.random.uniform(200, 400)),
                stake_weight=1.0,
                mobility_type="pedestrian",
                max_speed_kmh=np.random.uniform(3, 7)
            ),
            'iot_sensor': DeviceCapabilities(
                device_id=device_id,
                device_type=device_type,
                cpu_performance=np.random.uniform(0.1, 1.0),
                ram_gb=np.random.uniform(0.5, 2.0),
                battery_mah=int(np.random.uniform(1000, 3000)),
                network_interfaces=["wifi"],
                max_tx_power={"wifi": 15},
                signatures_per_sec=int(np.random.uniform(50, 150)),
                stake_weight=0.5,
                mobility_type="fixed",
                max_speed_kmh=0.0
            ),
            'vehicle': DeviceCapabilities(
                device_id=device_id,
                device_type=device_type,
                cpu_performance=np.random.uniform(5.0, 15.0),
                ram_gb=np.random.uniform(8.0, 32.0),
                battery_mah=int(np.random.uniform(50000, 100000)),
                network_interfaces=["wifi", "5g", "dsrc"],
                max_tx_power={"wifi": 25, "5g": 30, "dsrc": 28},
                signatures_per_sec=int(np.random.uniform(500, 1000)),
                stake_weight=2.0,
                mobility_type="vehicular",
                max_speed_kmh=np.random.uniform(30, 80)
            ),
            'base_station_6g': DeviceCapabilities(
                device_id=device_id,
                device_type=device_type,
                cpu_performance=np.random.uniform(50.0, 100.0),
                ram_gb=np.random.uniform(64.0, 128.0),
                battery_mah=1000000,  # Unlimited power
                network_interfaces=["6g", "fiber"],
                max_tx_power={"6g": 46, "fiber": 0},
                signatures_per_sec=int(np.random.uniform(2000, 5000)),
                stake_weight=10.0,
                mobility_type="fixed",
                max_speed_kmh=0.0
            ),
            'edge_server': DeviceCapabilities(
                device_id=device_id,
                device_type=device_type,
                cpu_performance=np.random.uniform(20.0, 50.0),
                ram_gb=np.random.uniform(32.0, 64.0),
                battery_mah=int(np.random.uniform(20000, 50000)),
                network_interfaces=["ethernet", "wifi", "5g"],
                max_tx_power={"wifi": 30, "5g": 35},
                signatures_per_sec=int(np.random.uniform(1000, 2000)),
                stake_weight=5.0,
                mobility_type="fixed",
                max_speed_kmh=0.0
            )
        }
        
        return capabilities_map.get(device_type, capabilities_map['smartphone'])
    
    def _create_integrated_nodes(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–∑–ª–æ–≤"""
        device_list = list(self.device_manager.devices.items())
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –≤—ã—à–∫–∏ –∫–∞–∫ Node 0
        # –ò—â–µ–º base_station_6g —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        central_tower = None
        other_devices = []
        
        for device_id, device in device_list:
            if device.device_type == 'base_station_6g':
                central_tower = (device_id, device)
            else:
                other_devices.append((device_id, device))
        
        # –ï—Å–ª–∏ –Ω–µ—Ç base_station_6g, —Å–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –≥–ª–∞–≤–Ω—É—é –≤—ã—à–∫—É
        if central_tower is None:
            self.logger.warning("No base_station_6g found, creating virtual central tower")
            # –°–æ–∑–¥–∞–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω—É—é –±–∞—à–Ω—é –¥–ª—è Node 0
            virtual_tower = self._generate_device_capabilities('base_station_6g')
            virtual_tower.device_id = 'central_tower_0'
            central_tower = ('central_tower_0', virtual_tower)
        
        # Node 0 - –ì–ª–∞–≤–Ω–∞—è –≤—ã—à–∫–∞ (—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è)
        node_id = 0
        tower_device_id, tower_device = central_tower
        
        # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–ª—è –≥–ª–∞–≤–Ω–æ–π –≤—ã—à–∫–∏
        central_position = (150.0, 150.0, 30.0)  # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç NS-3 –∫–æ–¥—É
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–π –≤—ã—à–∫–∏
        central_tower_node = IntegratedNodeState(
            ns3_node_id=node_id,
            position=central_position,
            zone=0,  # –ì–ª–∞–≤–Ω–∞—è –≤—ã—à–∫–∞ –≤—Å–µ–≥–¥–∞ –≤ 6G –∑–æ–Ω–µ
            rssi_6g=-30.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–∏–≥–Ω–∞–ª
            mobility_speed=0.0,  # –ù–µ–ø–æ–¥–≤–∏–∂–Ω–∞—è
            device_type=tower_device.device_type,
            capabilities=tower_device,
            battery_level=100.0,  # –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ
            energy_consumed=0.0,
            cpu_load=0.1,
            memory_usage=0.1,
            is_validator=True,  # –ì–ª–∞–≤–Ω–∞—è –≤—ã—à–∫–∞ –≤—Å–µ–≥–¥–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
            transactions_sent=0,
            blocks_validated=0,
            consensus_participation=1.0,  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É—á–∞—Å—Ç–∏–µ
            network_latency=1.0,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ª–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
            packet_loss=0.001,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –ø–æ—Ç–µ—Ä–∏
            throughput=10000.0  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        )
        
        self.nodes[node_id] = central_tower_node
        self.logger.info(f"üóº Created central tower (Node 0): {tower_device.device_type} at {central_position}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —É–∑–ª–æ–≤ –Ω–∞—á–∏–Ω–∞—è —Å ID 1
        node_id = 1
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ –∑–æ–Ω–∞–º
        zone_counters = {0: 1, 1: 0, 2: 0}  # Node 0 —É–∂–µ –≤ –∑–æ–Ω–µ 0
        target_distribution = {0: 0.3, 1: 0.3, 2: 0.4}  # 30% 6G, 30% Bridge, 40% MANET
        
        for device_id, device in other_devices:
            if node_id > 56:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ NS-3
                break
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω—ã —Å —É—á–µ—Ç–æ–º —Ä–∞–≤–Ω–æ–º–µ—Ä–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
            zone = self._determine_balanced_zone(device.device_type, zone_counters, len(other_devices), target_distribution)
            zone_counters[zone] += 1
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∑–æ–Ω–æ–π (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–ª–∞–≤–Ω–æ–π –≤—ã—à–∫–∏)
            position = self._generate_initial_position(zone)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —É–∑–ª–∞
            integrated_node = IntegratedNodeState(
                ns3_node_id=node_id,
                position=position,
                zone=zone,
                rssi_6g=self._calculate_initial_rssi(position),
                mobility_speed=self._get_mobility_speed(device.device_type),
                device_type=device.device_type,
                capabilities=device,
                battery_level=100.0,  # –ù–∞—á–∏–Ω–∞–µ–º —Å –ø–æ–ª–Ω–æ–π –±–∞—Ç–∞—Ä–µ–∏
                energy_consumed=0.0,
                cpu_load=0.1,
                memory_usage=0.2,
                is_validator=(zone in [0, 1] and np.random.random() < 0.45),  # 45% –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∑–æ–Ω–∞—Ö
                transactions_sent=0,
                blocks_validated=0,
                consensus_participation=0.0,
                network_latency=10.0,
                packet_loss=0.01,
                throughput=100.0
            )
            
            self.nodes[node_id] = integrated_node
            node_id += 1
        
        self.logger.info(f"Created {len(self.nodes)} integrated nodes (including central tower)")
        self.logger.info(f"Zone distribution: 6G={zone_counters[0]}, Bridge={zone_counters[1]}, MANET={zone_counters[2]}")
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        validators_count = sum(1 for node in self.nodes.values() if node.is_validator)
        self.logger.info(f"Initial validators: {validators_count} ({validators_count/len(self.nodes)*100:.1f}%)")
        self.logger.info(f"üóº Central tower established at {central_position} with max coverage")
    
    def _determine_balanced_zone(self, device_type: str, zone_counters: Dict[int, int], 
                                total_devices: int, target_distribution: Dict[int, float]) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–æ–Ω—ã —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∫–∏"""
        # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        device_preferences = {
            'smartphone': [0, 1, 2],  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ª—é–±–æ–π –∑–æ–Ω–µ
            'iot_sensor': [2, 1, 0],  # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç MANET
            'vehicle': [1, 0, 2],     # –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç Bridge
            'base_station_6g': [0],   # –¢–æ–ª—å–∫–æ 6G
            'edge_server': [1, 0]     # Bridge –∏–ª–∏ 6G
        }
        
        preferences = device_preferences.get(device_type, [0, 1, 2])
        
        # –í—ã–±–æ—Ä –∑–æ–Ω—ã —Å —É—á–µ—Ç–æ–º –±–∞–ª–∞–Ω—Å–∞
        for zone in preferences:
            current_ratio = zone_counters[zone] / max(1, sum(zone_counters.values()))
            target_ratio = target_distribution[zone]
            
            if current_ratio < target_ratio:
                return zone
        
        # –ï—Å–ª–∏ –≤—Å–µ –∑–æ–Ω—ã –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω—ã, –≤—ã–±–∏—Ä–∞–µ–º –Ω–∞–∏–º–µ–Ω–µ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        return min(zone_counters.keys(), key=lambda z: zone_counters[z])
    
    def _generate_initial_position(self, zone: int) -> Tuple[float, float, float]:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–æ–Ω—ã"""
        if zone == 0:  # 6G –∑–æ–Ω–∞
            radius = np.random.uniform(10, 150)
            angle = np.random.uniform(0, 2 * np.pi)
        elif zone == 1:  # Bridge –∑–æ–Ω–∞
            radius = np.random.uniform(150, 200)
            angle = np.random.uniform(0, 2 * np.pi)
        else:  # MANET –∑–æ–Ω–∞
            radius = np.random.uniform(200, 400)
            angle = np.random.uniform(0, 2 * np.pi)
        
        x = radius * np.cos(angle)
        y = radius * np.sin(angle)
        z = 1.5
        
        return (x, y, z)
    
    def _calculate_initial_rssi(self, position: Tuple[float, float, float]) -> float:
        """–†–∞—Å—á–µ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ RSSI –æ—Ç –≥–ª–∞–≤–Ω–æ–π –≤—ã—à–∫–∏"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—É—é –ø–æ–∑–∏—Ü–∏—é –≥–ª–∞–≤–Ω–æ–π –≤—ã—à–∫–∏
        central_tower_position = (150.0, 150.0, 30.0)  # –ü–æ–∑–∏—Ü–∏—è Node 0
        
        x, y, z = position
        tower_x, tower_y, tower_z = central_tower_position
        
        # –†–∞—Å—á–µ—Ç 3D —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –¥–æ –≥–ª–∞–≤–Ω–æ–π –≤—ã—à–∫–∏
        distance = np.sqrt((x - tower_x)**2 + (y - tower_y)**2 + ((z - tower_z)/10.0)**2)
        
        # –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å path loss –¥–ª—è 6G
        # P0 = -20 dBm (–º–æ—â–Ω–æ—Å—Ç—å –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ d0=1–º –æ—Ç 6G –±–∞–∑–æ–≤–æ–π —Å—Ç–∞–Ω—Ü–∏–∏)
        # n = 2.2 (path loss exponent –¥–ª—è –≥–æ—Ä–æ–¥—Å–∫–æ–π —Å—Ä–µ–¥—ã)
        P0 = -20.0
        n = 2.2
        d0 = 1.0
        
        if distance < d0:
            distance = d0
        
        # –ë–∞–∑–æ–≤—ã–π RSSI
        rssi = P0 - 10 * n * np.log10(distance / d0)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞—Ç—É—Ö–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã—Å–æ—Ç—ã
        height_loss = abs(z - tower_z) * 0.1  # 0.1 dB –Ω–∞ –º–µ—Ç—Ä —Ä–∞–∑–Ω–æ—Å—Ç–∏ –≤—ã—Å–æ—Ç
        rssi -= height_loss
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —à—É–º (log-normal shadowing)
        rssi += np.random.normal(0, 3.0)  # 3 dB —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è 6G —Å–µ—Ç–∏
        return max(-130.0, min(-20.0, rssi))

    def _get_mobility_speed(self, device_type: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è —Ç–∏–ø–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"""
        # –£–í–ï–õ–ò–ß–ï–ù–´ –°–ö–û–†–û–°–¢–ò –¥–ª—è –±–æ–ª—å—à–µ–π –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏
        speed_mapping = {
            'smartphone': np.random.uniform(1.5, 4.0),    # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å (0.5, 2.0) - –±—ã—Å—Ç—Ä—ã–µ –ø–µ—à–µ—Ö–æ–¥—ã
            'iot_sensor': 0.0,                            # –°—Ç–∞—Ç–∏—á–Ω—ã–π
            'vehicle': np.random.uniform(8.0, 25.0),      # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å (5.0, 15.0) - –±—ã—Å—Ç—Ä—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏
            'base_station_6g': 0.0,                       # –°—Ç–∞—Ç–∏—á–Ω—ã–π
            'edge_server': 0.0                            # –°—Ç–∞—Ç–∏—á–Ω—ã–π
        }
        return speed_mapping.get(device_type, 2.0)
    
    def _load_ns3_position_data(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π —É–∑–ª–æ–≤ –æ—Ç NS-3"""
        try:
            if not os.path.exists(self.positions_file):
                self.logger.warning(f"Position file not found: {self.positions_file}")
                return False
            
            # –ß–∏—Ç–∞–µ–º CSV —Ñ–∞–π–ª —Å –ø–æ–∑–∏—Ü–∏—è–º–∏
            with open(self.positions_file, 'r') as f:
                reader = csv.reader(f)
                header = next(reader)  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                
                # –ü–∞—Ä—Å–∏–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                # time,node0,x,y,z,node1,x,y,z,...
                node_columns = {}
                for i in range(1, len(header), 4):  # –ö–∞–∂–¥—ã–µ 4 –∫–æ–ª–æ–Ω–∫–∏: nodeN, x, y, z
                    if i + 3 < len(header):
                        node_id = int(header[i].replace('node', ''))
                        node_columns[node_id] = (i, i+1, i+2, i+3)  # node, x, y, z indices
                
                # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                for row in reader:
                    if len(row) < 2:
                        continue
                    
                    time_val = float(row[0])
                    if time_val not in self.position_data:
                        self.position_data[time_val] = {}
                    
                    for node_id, (node_idx, x_idx, y_idx, z_idx) in node_columns.items():
                        if x_idx < len(row) and y_idx < len(row) and z_idx < len(row):
                            try:
                                x = float(row[x_idx])
                                y = float(row[y_idx]) 
                                z = float(row[z_idx])
                                self.position_data[time_val][node_id] = (x, y, z)
                            except (ValueError, IndexError):
                                continue
            
            self.logger.info(f"Loaded {len(self.position_data)} time points with position data")
            self.stats['real_data_reads'] += 1
            return True
            
        except Exception as e:
            self.logger.error(f"Error loading position data: {e}")
            return False

    def _load_ns3_flow_data(self) -> bool:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤ –æ—Ç NS-3"""
        try:
            if not os.path.exists(self.flowmon_file):
                self.logger.warning(f"Flow monitor file not found: {self.flowmon_file}")
                return False
            
            # –ü–∞—Ä—Å–∏–º XML —Ñ–∞–π–ª flow monitor
            tree = ET.parse(self.flowmon_file)
            root = tree.getroot()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ—Ç–æ–∫–æ–≤
            for flow in root.findall('.//Flow'):
                flow_id = int(flow.get('flowId'))
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                self.flow_data[flow_id] = {
                    'tx_packets': int(flow.get('txPackets', 0)),
                    'rx_packets': int(flow.get('rxPackets', 0)),
                    'lost_packets': int(flow.get('lostPackets', 0)),
                    'tx_bytes': int(flow.get('txBytes', 0)),
                    'rx_bytes': int(flow.get('rxBytes', 0)),
                    'delay_sum': int(float(flow.get('delaySum', '0').replace('ns', '').replace('+', ''))),
                    'jitter_sum': int(float(flow.get('jitterSum', '0').replace('ns', '').replace('+', ''))),
                    'max_delay': int(float(flow.get('maxDelay', '0').replace('ns', '').replace('+', ''))),
                    'min_delay': int(float(flow.get('minDelay', '0').replace('ns', '').replace('+', ''))),
                    'times_forwarded': int(flow.get('timesForwarded', 0))
                }
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ dropped packets
                dropped_packets = {}
                for dropped in flow.findall('.//packetsDropped'):
                    reason = int(dropped.get('reasonCode'))
                    count = int(dropped.get('number'))
                    dropped_packets[reason] = count
                self.flow_data[flow_id]['dropped_packets'] = dropped_packets
            
            self.logger.info(f"Loaded flow data for {len(self.flow_data)} flows")
            self.stats['real_data_reads'] += 1
            return True
            
        except Exception as e:
            self.logger.error(f"Error loading flow data: {e}")
            return False

    def _get_position_at_time(self, time_val: float) -> Dict[int, Tuple[float, float, float]]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏–∏ —É–∑–ª–æ–≤ –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è"""
        if not self.position_data:
            return {}
        
        # –ù–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏
        times = sorted(self.position_data.keys())
        
        # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω—Ç–µ—Ä–ø–æ–ª—è—Ü–∏—è –∏–ª–∏ –±–ª–∏–∂–∞–π—à–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        closest_time = min(times, key=lambda t: abs(t - time_val))
        
        return self.position_data.get(closest_time, {})

    def _calculate_zone_from_position(self, position: Tuple[float, float, float]) -> int:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–æ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏"""
        x, y, z = position
        
        # –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–æ–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        # 6G –∑–æ–Ω–∞: —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å (0-100, 0-100)
        if 0 <= x <= 100 and 0 <= y <= 100:
            return 0  # 6G zone
        
        # Bridge –∑–æ–Ω–∞: –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–∞—è –æ–±–ª–∞—Å—Ç—å (100-150, 0-150) –∏–ª–∏ (0-150, 100-150)
        elif ((100 <= x <= 150 and 0 <= y <= 150) or 
              (0 <= x <= 150 and 100 <= y <= 150)):
            return 1  # Bridge zone
        
        # MANET –∑–æ–Ω–∞: –æ—Å—Ç–∞–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
        else:
            return 2  # MANET zone

    def _calculate_rssi_from_position(self, position: Tuple[float, float, float]) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å RSSI –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≥–ª–∞–≤–Ω–æ–π –≤—ã—à–∫–∏"""
        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–µ–∞–ª—å–Ω–æ–π –≥–ª–∞–≤–Ω–æ–π –≤—ã—à–∫–∏
        if 0 in self.nodes:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–∑–∏—Ü–∏—é –≥–ª–∞–≤–Ω–æ–π –≤—ã—à–∫–∏ Node 0
            central_tower = self.nodes[0]
            tower_x, tower_y, tower_z = central_tower.position
        else:
            # Fallback –∫ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            tower_x, tower_y, tower_z = 150.0, 150.0, 30.0
        
        x, y, z = position
        
        # 3D —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ —Å —É—á–µ—Ç–æ–º –≤—ã—Å–æ—Ç—ã –≤—ã—à–∫–∏
        distance = np.sqrt((x - tower_x)**2 + (y - tower_y)**2 + ((z - tower_z)/5.0)**2)
        
        # 6G –º–æ–¥–µ–ª—å path loss —Å —É—á–µ—Ç–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω—Ç–µ–Ω–Ω
        P0 = -25.0  # –£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–¥–∞—á–∏ 6G
        n = 2.0     # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π path loss exponent –¥–ª—è 6G
        d0 = 1.0
        
        if distance < d0:
            distance = d0
        
        # –û—Å–Ω–æ–≤–Ω–æ–π path loss
        rssi = P0 - 10 * n * np.log10(distance / d0)
        
        # 6G beamforming gain (–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–Ω—Ç–µ–Ω–Ω—ã)
        if distance < 200:  # –í –ø—Ä–µ–¥–µ–ª–∞—Ö beamforming –∑–æ–Ω—ã
            beamforming_gain = 10.0 - (distance / 200.0) * 8.0  # 2-10 dB gain
            rssi += beamforming_gain
        
        # –ó–∞—Ç—É—Ö–∞–Ω–∏–µ –æ—Ç –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å)
        if distance > 100:
            obstacle_loss = min(15.0, (distance - 100) / 20.0)  # –î–æ 15 dB –ø–æ—Ç–µ—Ä—å
            rssi -= obstacle_loss
        
        # –®—É–º –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ—Ä–µ–Ω—Ü–∏—è
        rssi += np.random.normal(0, 2.5)  # –ú–µ–Ω—å—à–∏–π —à—É–º –¥–ª—è 6G
        
        return max(-140.0, min(-20.0, rssi))

    def _get_network_metrics_from_flows(self, node_id: int) -> Dict[str, float]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤"""
        metrics = {
            'packet_loss': 0.0,
            'average_delay': 0.0,
            'jitter': 0.0,
            'throughput': 0.0
        }
        
        # –ù–∞–π—Ç–∏ –ø–æ—Ç–æ–∫–∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –¥–∞–Ω–Ω—ã–º —É–∑–ª–æ–º
        node_flows = []
        for flow_id, flow_data in self.flow_data.items():
            # –ü—Ä–æ—Å—Ç–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞: flow_id —Å–≤—è–∑–∞–Ω —Å node_id
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –Ω—É–∂–Ω–∞ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è
            if flow_id % len(self.nodes) == node_id:
                node_flows.append(flow_data)
        
        if not node_flows:
            return metrics
        
        # –ê–≥—Ä–µ–≥–∏—Ä—É–µ–º –º–µ—Ç—Ä–∏–∫–∏
        total_tx = sum(f['tx_packets'] for f in node_flows)
        total_rx = sum(f['rx_packets'] for f in node_flows)
        total_lost = sum(f['lost_packets'] for f in node_flows)
        
        if total_tx > 0:
            metrics['packet_loss'] = total_lost / total_tx
        
        # –°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        total_delay_ns = sum(f['delay_sum'] for f in node_flows)
        total_packets = sum(f['rx_packets'] for f in node_flows)
        if total_packets > 0:
            metrics['average_delay'] = (total_delay_ns / total_packets) / 1e9  # ns to seconds
        
        # Jitter (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
        total_jitter_ns = sum(f['jitter_sum'] for f in node_flows)
        if total_packets > 0:
            metrics['jitter'] = (total_jitter_ns / total_packets) / 1e9
        
        # –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å (bytes/second)
        total_bytes = sum(f['rx_bytes'] for f in node_flows)
        if self.simulation_time > 0:
            metrics['throughput'] = total_bytes / self.simulation_time
        
        return metrics

    def _synchronize_states(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É NS-3 –∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏"""
        current_positions = self._get_position_at_time(self.simulation_time)
        
        if not current_positions:
            self.logger.debug(f"No position data for time {self.simulation_time}")
            return
        
        for node_id, position in current_positions.items():
            if node_id in self.nodes:
                node = self.nodes[node_id]
                old_zone = node.zone
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –æ—Ç NS-3
                node.position = position
                node.zone = self._calculate_zone_from_position(position)
                node.rssi_6g = self._calculate_rssi_from_position(position)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç NS-3
                network_metrics = self._get_network_metrics_from_flows(node_id)
                node.packet_loss = network_metrics['packet_loss']
                node.network_latency = network_metrics['average_delay'] * 1000  # ms
                if network_metrics['throughput'] > 0:
                    node.throughput = network_metrics['throughput']
                
                # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø–µ—Ä–µ—Ö–æ–¥—ã –∑–æ–Ω
                if old_zone != node.zone:
                    self.stats['zone_transitions'] += 1
                    self.logger.debug(f"Node {node.ns3_node_id} zone transition: {old_zone} ‚Üí {node.zone}")
                    
                    # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —Ç–µ—Ä—è—é—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ MANET –∑–æ–Ω—É
                    if node.is_validator and node.zone == 2:  # zone 2 = MANET
                        node.is_validator = False
                        self.logger.info(f"üîÑ Node {node.ns3_node_id} lost validator status after moving to MANET zone")
        
        self.stats['sync_events'] += 1
        self.last_sync_time = self.simulation_time

    def _get_ns3_state_data(self) -> Dict[int, Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ—Ç NS-3 (Legacy method - —Ç–µ–ø–µ—Ä—å –∑–∞–º–µ–Ω–µ–Ω _synchronize_states)"""
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ _synchronize_states
        return {}

    def run_simulation(self):
        """–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.logger.info("üöÄ Starting Integrated NS-3 Device Simulation")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ NS-3
        self.logger.info("üìÇ Loading NS-3 data...")
        pos_loaded = self._load_ns3_position_data()
        flow_loaded = self._load_ns3_flow_data()
        
        if not pos_loaded and not flow_loaded:
            self.logger.error("‚ùå Failed to load any NS-3 data, running with simulation data")
        elif pos_loaded and flow_loaded:
            self.logger.info("‚úÖ Successfully loaded NS-3 position and flow data")
        elif pos_loaded:
            self.logger.info("‚ö†Ô∏è Loaded position data only, flow data unavailable")
        else:
            self.logger.info("‚ö†Ô∏è Loaded flow data only, position data unavailable")
        
        self.running = True
        self.start_time = time.time()
        
        try:
            # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            self._run_device_loop()
            
        except KeyboardInterrupt:
            self.logger.info("Simulation interrupted by user")
        except Exception as e:
            self.logger.error(f"Simulation error: {e}")
            import traceback
            traceback.print_exc()
        finally:
            self._cleanup()
    
    def _run_device_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏–º—É–ª—è—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤"""
        self.logger.info("Starting device simulation loop")
        
        # –ö—Ä–∞—Å–∏–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
        print("üîÑ Starting Real-Time NS-3 Device Integration")
        print("=" * 80)
        print(f"‚è±Ô∏è  Duration: {self.config.duration}s | üîÑ Sync: {self.config.sync_interval}s | üìä Devices: {len(self.nodes)}")
        print("=" * 80)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä —Å–∏–º–≤–æ–ª—ã
        progress_chars = ["‚†ã", "‚†ô", "‚†π", "‚†∏", "‚†º", "‚†¥", "‚†¶", "‚†ß", "‚†á", "‚†è"]
        progress_index = 0
        last_progress_update = 0
        
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∏–º—É–ª—è—Ü–∏–∏
        while self.running and self.simulation_time < self.config.duration:
            step_start = time.time()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏
            self.simulation_time = step_start - self.start_time if self.start_time else 0
            
            # –ö—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
            if self.simulation_time - last_progress_update >= 2.0:
                self._show_beautiful_progress(progress_chars[progress_index % len(progress_chars)])
                progress_index += 1
                last_progress_update = self.simulation_time
            
            # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å NS-3 –¥–∞–Ω–Ω—ã–º–∏
            if self.simulation_time - self.last_sync_time >= self.config.sync_interval:
                print(f"\nüîÑ {time.strftime('%H:%M:%S')} Synchronizing with NS-3 data...")
                self._synchronize_states()
                self._show_sync_results()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
            self._update_device_states(self.simulation_time)
            
            # –ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Ä–µ–º–µ–Ω–∏ —à–∞–≥–∞
            step_duration = time.time() - step_start
            sleep_time = max(0, self.config.time_step - step_duration)
            
            if sleep_time > 0:
                time.sleep(sleep_time)
            
            # –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            if int(self.simulation_time) % 10 == 0 and int(self.simulation_time) > 0:
                self._show_detailed_progress()
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥
        print(f"\nüéØ Simulation completed after {self.simulation_time:.1f}s")
        print("=" * 80)
        self._show_final_summary()

    def _show_beautiful_progress(self, spinner_char):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∏–º—É–ª—è—Ü–∏–∏"""
        progress_percent = min(100, (self.simulation_time / self.config.duration) * 100)
        progress_bar_width = 40
        filled_width = int(progress_bar_width * progress_percent / 100)
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        progress_bar = "‚ñà" * filled_width + "‚ñë" * (progress_bar_width - filled_width)
        
        # –¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        active_validators = sum(1 for node in self.nodes.values() if node.is_validator and node.battery_level > 10)
        total_transactions = sum(node.transactions_sent for node in self.nodes.values())
        total_blocks = sum(node.blocks_validated for node in self.nodes.values())
        avg_battery = sum(node.battery_level for node in self.nodes.values()) / len(self.nodes)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
        print(f"\r{spinner_char} Progress: [{progress_bar}] {progress_percent:5.1f}% | "
              f"‚è±Ô∏è {self.simulation_time:5.1f}s | "
              f"üõ°Ô∏è {active_validators}v | "
              f"üìä {total_transactions}tx | "
              f"üóÉÔ∏è {total_blocks}b | "
              f"üîã {avg_battery:4.1f}%", end="", flush=True)

    def _show_sync_results(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        zone_counts = {0: 0, 1: 0, 2: 0}
        for node in self.nodes.values():
            zone_counts[node.zone] += 1
        
        print(f"   üì° Data loaded: {len(self.position_data)} timepoints | "
              f"üåê Zones: 5G={zone_counts[0]} Bridge={zone_counts[1]} MANET={zone_counts[2]} | "
              f"üîÑ Transitions: {self.stats['zone_transitions']}")

    def _show_detailed_progress(self):
        """–î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥"""
        total_transactions = sum(node.transactions_sent for node in self.nodes.values())
        total_blocks = sum(node.blocks_validated for node in self.nodes.values())
        avg_battery = sum(node.battery_level for node in self.nodes.values()) / len(self.nodes)
        total_energy = sum(node.energy_consumed for node in self.nodes.values())
        active_validators = sum(1 for node in self.nodes.values() if node.is_validator and node.battery_level > 10)
        total_validators = sum(1 for node in self.nodes.values() if node.is_validator)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–∞—Ö –∏ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞—Ö
        zone_validators = {0: 0, 1: 0, 2: 0}
        zone_counts = {0: 0, 1: 0, 2: 0}
        
        for node in self.nodes.values():
            zone_counts[node.zone] += 1
            if node.is_validator and node.battery_level > 10:
                zone_validators[node.zone] += 1
        
        print(f"\nüìä Milestone {int(self.simulation_time)}s:")
        print(f"   üí´ Transactions: {total_transactions} | Success Rate: ~99%")
        print(f"   üóÉÔ∏è  Blocks: {total_blocks} | Validators: {active_validators}/{total_validators}")
        print(f"   üõ°Ô∏è Zone Validators: 5G={zone_validators[0]} Bridge={zone_validators[1]} MANET={zone_validators[2]}")
        print(f"   üåê Zone Distribution: 5G={zone_counts[0]} Bridge={zone_counts[1]} MANET={zone_counts[2]}")
        print(f"   ‚ö° Energy: {total_energy:.1f}J | Avg Battery: {avg_battery:.1f}%")
        print(f"   üîÑ Zone Transitions: {self.stats['zone_transitions']} | Sync Events: {self.stats['sync_events']}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å NS-3 runner
        if self.ns3_runner and hasattr(self.ns3_runner, 'validator_manager'):
            try:
                validator_stats = self.ns3_runner.validator_manager.get_consensus_statistics()
                print(f"   üèõÔ∏è Consensus: Active={validator_stats['active_validators']} "
                      f"Candidates={validator_stats['candidate_nodes']} "
                      f"Retired={validator_stats['retired_validators']}")
                print(f"   üìã Validator Metrics: Joins={validator_stats['metrics']['total_join_transactions']} "
                      f"Leaves={validator_stats['metrics']['total_leave_transactions']} "
                      f"Changes={validator_stats['metrics']['validator_changes']}")
            except Exception as e:
                self.logger.debug(f"Could not get validator statistics: {e}")

    def _show_final_summary(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å–≤–æ–¥–∫—É"""
        results = self.get_results()
        
        print("üéØ FINAL SIMULATION RESULTS")
        print("-" * 50)
        print(f"üì± Total Devices: {results['total_nodes']}")
        print(f"üí´ Transactions: {results['total_transactions']}")
        print(f"üóÉÔ∏è  Blocks: {results['total_blocks']}")  
        print(f"‚ö° Energy: {results['total_energy_consumed']:.1f}J")
        print(f"üõ°Ô∏è Validators: {results['validator_count']}")
        print(f"üîÑ Zone Transitions: {results['zone_transitions']}")
        print(f"üì° Real Data Syncs: {results['sync_events']}")
        print(f"üîã Avg Battery: {results['average_battery']:.1f}%")
        print(f"üíª Avg CPU Load: {results['average_cpu_load']:.1f}%")
        
        # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∑–æ–Ω–∞–º
        print(f"\nüåê Zone Distribution:")
        zone_names = {0: "5G", 1: "Bridge", 2: "MANET"}
        for zone_id, count in results['nodes_by_zone'].items():
            zone_name = zone_names.get(zone_id, f"Zone{zone_id}")
            print(f"   {zone_name}: {count} devices")
        
        print("-" * 50)

    def _update_device_states(self, current_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ NS-3"""
        for node in self.nodes.values():
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            self._update_energy_consumption(node)
            self._update_performance_metrics(node)
            self._update_blockchain_activity(node)
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ –ò–ù–ê–ö–¢–ò–í–ù–´–• –í–ê–õ–ò–î–ê–¢–û–†–û–í:
            # –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –≤ NS-3 runner
            if self.ns3_runner and node.is_validator:
                try:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞ —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å auto-leave
                    zone_mapping = {0: 'FIVE_G', 1: 'BRIDGE', 2: 'MANET'}
                    zone_type = zone_mapping.get(node.zone, 'MANET')
                    
                    if hasattr(self.ns3_runner, 'validator_manager') and self.ns3_runner.validator_manager:
                        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º ZoneType –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        from models.blockchain.consensus_validator_manager import ZoneType
                        zone_enum = getattr(ZoneType, zone_type, ZoneType.MANET)
                        
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω—ã –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
                        if zone_enum not in [ZoneType.FIVE_G, ZoneType.BRIDGE]:
                            self.logger.debug(f"Node {node.ns3_node_id} in {zone_enum.value} zone cannot be validator")
                            return
                        
                        # –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
                        self.ns3_runner.validator_manager.update_node_status(
                            node.ns3_node_id,
                            rssi_6g=node.rssi_6g,
                            battery_level=max(0.15, node.battery_level / 100.0),  # –ú–∏–Ω–∏–º—É–º 15% —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ auto-leave
                            zone=zone_enum
                        )
                        
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º last_activity –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
                        if hasattr(self.ns3_runner.validator_manager, 'active_validators'):
                            if node.ns3_node_id in self.ns3_runner.validator_manager.active_validators:
                                validator = self.ns3_runner.validator_manager.active_validators[node.ns3_node_id]
                                validator.last_activity = current_time + (self.start_time if self.start_time else 0)
                        
                except Exception as e:
                    self.logger.debug(f"Could not update validator status for node {node.ns3_node_id}: {e}")
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ NS-3, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏
            if self.position_data:
                # –ü–æ–∑–∏—Ü–∏—è —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ _synchronize_states
                pass
            else:
                # Fallback: —Å–∏–º—É–ª–∏—Ä—É–µ–º –º–æ–±–∏–ª—å–Ω–æ—Å—Ç—å (—Å —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é)
                self._update_mobility(node, current_time)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ç–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            if self.flow_data:
                # –ú–µ—Ç—Ä–∏–∫–∏ —É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ _synchronize_states
                pass
            else:
                # Fallback: —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏
                self._update_network_metrics(node)
    
    def _update_mobility(self, node: IntegratedNodeState, current_time: float):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏ –∏ –ø–æ–∑–∏—Ü–∏–∏ —É–∑–ª–∞"""
        # –¢–æ–ª—å–∫–æ –º–æ–±–∏–ª—å–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–µ—Ä–µ–º–µ—â–∞—é—Ç—Å—è
        if node.device_type not in ['smartphone', 'vehicle', 'iot_sensor']:
            return
        
        # –£–í–ï–õ–ò–ß–ï–ù–ê –ú–û–ë–ò–õ–¨–ù–û–°–¢–¨: 40% —à–∞–Ω—Å –¥–≤–∏–∂–µ–Ω–∏—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É (–±—ã–ª–æ 10%)
        movement_probability = 0.4 if node.device_type == 'vehicle' else 0.25 if node.device_type == 'smartphone' else 0.1
        
        if np.random.random() < movement_probability:
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
            angle = np.random.uniform(0, 2 * np.pi)
            # –£–≤–µ–ª–∏—á–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å –¥–≤–∏–∂–µ–Ω–∏—è –¥–ª—è –±–æ–ª—å—à–µ–π –¥–∏–Ω–∞–º–∏–∫–∏
            distance = node.mobility_speed * self.config.time_step * 2.0  # –£–¥–≤–æ–µ–Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å
            
            # –ù–æ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è
            new_x = node.position[0] + distance * np.cos(angle)
            new_y = node.position[1] + distance * np.sin(angle)
            new_z = node.position[2]
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Å–∏–º—É–ª—è—Ü–∏–∏
            new_x = np.clip(new_x, -500, 500)
            new_y = np.clip(new_y, -500, 500)
            
            old_zone = node.zone
            node.position = (new_x, new_y, new_z)
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–æ–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–∑–∏—Ü–∏–∏ (–∏–∑–º–µ–Ω–µ–Ω—ã –≥—Ä–∞–Ω–∏—Ü—ã –¥–ª—è –±–æ–ª—å—à–µ–π –¥–∏–Ω–∞–º–∏–∫–∏)
            distance_from_center = np.sqrt(new_x**2 + new_y**2)
            
            if distance_from_center < 120:  # –£–º–µ–Ω—å—à–µ–Ω–∞ 6G –∑–æ–Ω–∞ (–±—ã–ª–æ 150)
                node.zone = 0
            elif distance_from_center < 250:  # –£–º–µ–Ω—å—à–µ–Ω–∞ Bridge –∑–æ–Ω–∞ (–±—ã–ª–æ 300) 
                node.zone = 1
            else:  # MANET –∑–æ–Ω–∞
                node.zone = 2
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RSSI –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–æ–≤–æ–π –ø–æ–∑–∏—Ü–∏–∏
            node.rssi_6g = self._calculate_initial_rssi(node.position)
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∑–æ–Ω
            if old_zone != node.zone:
                self.stats['zone_transitions'] += 1
                self.logger.debug(f"Node {node.ns3_node_id} zone transition: {old_zone} ‚Üí {node.zone}")
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–û: –í–∞–ª–∏–¥–∞—Ç–æ—Ä—ã —Ç–µ—Ä—è—é—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –≤ MANET –∑–æ–Ω—É
                if node.is_validator and node.zone == 2:  # zone 2 = MANET
                    node.is_validator = False
                    self.logger.info(f"üîÑ Node {node.ns3_node_id} lost validator status after moving to MANET zone")
    
    def _update_energy_consumption(self, node: IntegratedNodeState):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–æ–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —É–∑–ª–∞"""
        # –ë–∞–∑–æ–≤–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ CPU (–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ)
        base_power = node.capabilities.cpu_performance * 0.1  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.5 –¥–æ 0.1 –í—Ç
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ—Ç —Å–µ—Ç–µ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        network_power = node.throughput / 1000.0  # –°–Ω–∏–∂–µ–Ω–æ —Å 100 –¥–æ 1000
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –æ—Ç –∫–æ–Ω—Å–µ–Ω—Å—É—Å–∞
        consensus_power = 0.5 if node.is_validator else 0.0  # –°–Ω–∏–∂–µ–Ω–æ —Å 2.0 –¥–æ 0.5 –í—Ç
        
        total_power = base_power + network_power + consensus_power
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ (–≤ –¥–∂–æ—É–ª—è—Ö –∑–∞ —Å–µ–∫—É–Ω–¥—É)
        node.energy_consumed += total_power * self.config.time_step
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–∞—Ç–∞—Ä–µ–∏ (–±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ)
        if node.capabilities.battery_mah < 1000000:  # –ù–µ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö —Å—Ç–∞–Ω—Ü–∏–π
            # –ë–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç —Ä–∞–∑—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏
            battery_capacity_wh = node.capabilities.battery_mah * 3.7 / 1000  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –í—Ç*—á
            battery_drain_percent = (total_power * self.config.time_step / 3600) / battery_capacity_wh * 100
            node.battery_level = max(0, node.battery_level - battery_drain_percent)
    
    def _update_performance_metrics(self, node: IntegratedNodeState):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        # CPU –Ω–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        base_load = 0.1  # –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞
        validator_load = 0.3 if node.is_validator else 0.0
        network_load = min(0.5, node.throughput / 1000.0)
        
        node.cpu_load = min(1.0, base_load + validator_load + network_load)
        
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        base_memory = 0.2  # –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        blockchain_memory = 0.1 if node.is_validator else 0.0
        
        node.memory_usage = min(1.0, base_memory + blockchain_memory)
    
    def _update_blockchain_activity(self, node: IntegratedNodeState):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (—É–≤–µ–ª–∏—á–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        if node.device_type in ['smartphone', 'vehicle'] and np.random.random() < 0.25:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.2
            node.transactions_sent += 1
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –±–ª–æ–∫–æ–≤ (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ –ª–æ–≥–∏–∫–∞)
        if node.is_validator and node.battery_level > 10.0:  # –°–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ —Å 20% –¥–æ 10%
            # –£–≤–µ–ª–∏—á–µ–Ω–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–ª–æ–∫–æ–≤
            if np.random.random() < 0.2:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.15
                node.blocks_validated += 1
                node.consensus_participation = min(1.0, node.consensus_participation + 0.05)
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –±–ª–æ–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ (–Ω–µ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö)
        if node.is_validator and np.random.random() < 0.12:  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 0.08
            node.blocks_validated += 1
        
        # –î–û–ë–ê–í–õ–ï–ù–ê –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ê–Ø –†–û–¢–ê–¶–ò–Ø –í–ê–õ–ò–î–ê–¢–û–†–û–í
        self._dynamic_validator_rotation(node)
    
    def _dynamic_validator_rotation(self, node: IntegratedNodeState):
        """–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–æ–≤"""
        
        # –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ (–°–ù–ò–ñ–ï–ù–û: 2% —à–∞–Ω—Å –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)
        if node.is_validator and np.random.random() < 0.02:  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.05
            event_type = np.random.choice(['performance_drop', 'signal_fluctuation', 'high_load'], p=[0.4, 0.4, 0.2])
            
            if event_type == 'performance_drop':
                # –í—Ä–µ–º–µ–Ω–Ω–æ —Å–Ω–∏–∂–∞–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, —á—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Ä–æ—Ç–∞—Ü–∏–∏
                node.cpu_load = min(1.0, node.cpu_load + 0.2)  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.3
                node.consensus_participation = max(0.0, node.consensus_participation - 0.05)  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.1
                
            elif event_type == 'signal_fluctuation':
                # –§–ª—É–∫—Ç—É–∞—Ü–∏—è —Å–∏–≥–Ω–∞–ª–∞ –º–æ–∂–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å–ª–∞–±–∏—Ç—å RSSI
                if hasattr(node, 'rssi_6g'):
                    node.rssi_6g = max(-90.0, node.rssi_6g - np.random.uniform(2.0, 8.0))  # –°–Ω–∏–∂–µ–Ω–æ –≤–ª–∏—è–Ω–∏–µ
                    
            elif event_type == 'high_load':
                # –í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –º–æ–∂–µ—Ç –≤–ª–∏—è—Ç—å –Ω–∞ –±–∞—Ç–∞—Ä–µ—é
                node.battery_level = max(10.0, node.battery_level - np.random.uniform(1.0, 4.0))  # –°–Ω–∏–∂–µ–Ω–æ –≤–ª–∏—è–Ω–∏–µ
        
        # –°–ª—É—á–∞–π–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–°–ù–ò–ñ–ï–ù–û: 3% —à–∞–Ω—Å –¥–ª—è –Ω–µ-–≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤)
        elif not node.is_validator and np.random.random() < 0.03:  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.08
            improvement_type = np.random.choice(['signal_boost', 'performance_boost', 'battery_recharge'], p=[0.35, 0.35, 0.3])
            
            if improvement_type == 'signal_boost':
                # –£–ª—É—á—à–µ–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —É–∑–µ–ª –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º
                if hasattr(node, 'rssi_6g'):
                    node.rssi_6g = min(-50.0, node.rssi_6g + np.random.uniform(2.0, 6.0))  # –°–Ω–∏–∂–µ–Ω–æ –≤–ª–∏—è–Ω–∏–µ
                    
            elif improvement_type == 'performance_boost':
                # –£–ª—É—á—à–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                node.cpu_load = max(0.05, node.cpu_load - 0.1)  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.2
                node.memory_usage = max(0.1, node.memory_usage - 0.05)  # –°–Ω–∏–∂–µ–Ω–æ —Å 0.1
                
            elif improvement_type == 'battery_recharge':
                # –ü–æ–¥–∑–∞—Ä—è–¥–∫–∞ –±–∞—Ç–∞—Ä–µ–∏
                node.battery_level = min(100.0, node.battery_level + np.random.uniform(2.0, 8.0))  # –°–Ω–∏–∂–µ–Ω–æ
        
        # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∞—è —Ä–æ—Ç–∞—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤ (–±–æ–ª–µ–µ —Ä–µ–¥–∫–∞—è)
        if (node.device_type in ['base_station_6g', 'edge_server'] and 
            node.zone in [0, 1] and  # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω—ã - —Ç–æ–ª—å–∫–æ 5G (0) –∏ Bridge (1), –Ω–µ MANET (2)
            np.random.random() < 0.005 and  # –°–ù–ò–ñ–ï–ù–û: 0.5% —à–∞–Ω—Å —Å—Ç–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º (–±—ã–ª–æ 1%)
            node.battery_level > 50.0 and  # –£–≤–µ–ª–∏—á–µ–Ω –ø–æ—Ä–æ–≥ –±–∞—Ç–∞—Ä–µ–∏ (–±—ã–ª–æ 40%)
            node.cpu_load < 0.5 and        # –ë–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–±—ã–ª–æ 0.6)
            not hasattr(node, '_last_validator_attempt')):  # –ù–æ–≤–æ–µ —É—Å–ª–æ–≤–∏–µ
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–ø—ã—Ç–∫–∏
            node._last_validator_attempt = self.simulation_time
            
            # –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞—Ç—å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å–µ–Ω—Å—É—Å-—Ä–∞—É–Ω–¥–æ–≤)
            if (hasattr(self, 'ns3_runner') and 
                self.ns3_runner and 
                hasattr(self.ns3_runner, 'validator_manager')):
                
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω—Å–µ–Ω—Å—É—Å-—Ä–∞—É–Ω–¥–æ–≤
                    validator_stats = self.ns3_runner.validator_manager.get_consensus_statistics()
                    if validator_stats['active_consensus_rounds'] < 2:  # –°–ù–ò–ñ–ï–ù–û: –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ä–∞—É–Ω–¥–æ–≤ (–±—ã–ª–æ 3)
                        
                        from models.blockchain.consensus_validator_manager import ZoneType
                        zone_mapping = {0: ZoneType.FIVE_G, 1: ZoneType.BRIDGE, 2: ZoneType.MANET}
                        zone_enum = zone_mapping.get(node.zone, ZoneType.MANET)
                        
                        # –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω—ã –ø–µ—Ä–µ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π
                        if zone_enum not in [ZoneType.FIVE_G, ZoneType.BRIDGE]:
                            self.logger.debug(f"Node {node.ns3_node_id} in {zone_enum.value} zone cannot be validator")
                            return
                        
                        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                        success = self.ns3_runner.validator_manager.register_node(
                            node_id=node.ns3_node_id,
                            zone=zone_enum,
                            rssi_6g=node.rssi_6g,
                            battery_level=node.battery_level / 100.0,
                            cert_valid=True,
                            dual_radio=(node.device_type in ['base_station_6g', 'edge_server'])
                        )
                        
                        if success:
                            node.is_validator = True  # –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ–≥–æ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–∞
                            self.logger.info(f"üÜï Node {node.ns3_node_id} ({node.device_type}) became validator candidate!")
                
                except Exception as e:
                    self.logger.debug(f"Failed to register new validator candidate {node.ns3_node_id}: {e}")
        
        # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ (–∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥) - –£–í–ï–õ–ò–ß–ï–ù–û —Å 30 –¥–æ 60 —Å–µ–∫—É–Ω–¥
        elif (hasattr(node, '_last_validator_attempt') and 
              self.simulation_time - node._last_validator_attempt > 60.0):
            delattr(node, '_last_validator_attempt')
    
    def _update_network_metrics(self, node: IntegratedNodeState):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        # –õ–∞—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∑–æ–Ω—ã –∏ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
        base_latency = {0: 5.0, 1: 15.0, 2: 50.0}[node.zone]  # –º—Å
        distance_factor = np.sqrt(node.position[0]**2 + node.position[1]**2) / 100.0
        
        node.network_latency = base_latency + distance_factor
        
        # –ü–æ—Ç–µ—Ä—è –ø–∞–∫–µ—Ç–æ–≤ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç RSSI
        if node.rssi_6g > -70:
            node.packet_loss = 0.01
        elif node.rssi_6g > -80:
            node.packet_loss = 0.05
        else:
            node.packet_loss = 0.1
        
        # –ü—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        max_throughput = 100.0  # –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–ø—É—Å–∫–Ω–∞—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å
        if "5g" in node.capabilities.network_interfaces:
            max_throughput = 500.0
        elif "6g" in node.capabilities.network_interfaces:
            max_throughput = 1000.0
        elif "fiber" in node.capabilities.network_interfaces:
            max_throughput = 10000.0
        
        rssi_factor = max(0.1, (node.rssi_6g + 100) / 50.0)
        battery_factor = max(0.1, node.battery_level / 100.0)
        
        node.throughput = max_throughput * rssi_factor * battery_factor
    
    def _cleanup(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤"""
        self.logger.info("Cleaning up integrated simulation...")
        
        self.running = False
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–æ–≤
        if self.ns3_thread and self.ns3_thread.is_alive():
            self.ns3_thread.join(timeout=10)
        
        if self.sync_thread and self.sync_thread.is_alive():
            self.sync_thread.join(timeout=5)
        
        # –û—á–∏—Å—Ç–∫–∞ NS-3
        if self.ns3_runner:
            self.ns3_runner.cleanup()
        
        self.logger.info("Cleanup completed")
    
    def get_results(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        total_transactions = sum(node.transactions_sent for node in self.nodes.values())
        total_blocks = sum(node.blocks_validated for node in self.nodes.values())
        total_energy = sum(node.energy_consumed for node in self.nodes.values())
        
        return {
            'simulation_time': self.simulation_time,
            'total_nodes': len(self.nodes),
            'total_transactions': total_transactions,
            'total_blocks': total_blocks,
            'total_energy_consumed': total_energy,
            'zone_transitions': self.stats['zone_transitions'],
            'sync_events': self.stats['sync_events'],
            'feedback_events': self.stats['feedback_events'],
            'average_battery': np.mean([node.battery_level for node in self.nodes.values()]),
            'average_cpu_load': np.mean([node.cpu_load for node in self.nodes.values()]),
            'validator_count': sum(1 for node in self.nodes.values() if node.is_validator),
            'nodes_by_zone': {
                zone: sum(1 for node in self.nodes.values() if node.zone == zone)
                for zone in [0, 1, 2]
            }
        }

def main():
    """–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏"""
    logging.basicConfig(level=logging.INFO)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ NS-3
    current_dir = os.path.dirname(os.path.abspath(__file__))
    ns3_dir = os.path.join(current_dir, "..", "..", "external", "ns-3")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    config = IntegrationConfig(
        duration=120.0,  # 2 –º–∏–Ω—É—Ç—ã
        time_step=1.0,
        sync_interval=5.0,  # –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        enable_real_time=False,
        enable_feedback=True,
        ns3_directory=ns3_dir
    )
    
    # NS-3 –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    ns3_config = {
        'manet_nodes': 15,
        'fiveg_nodes': 3,
        'bridge_nodes': 5,
        'fiveg_radius': 150.0,
        'min_validators': 3,
        'max_validators': 7
    }
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
    device_config = {
        'device_types': {
            'smartphone': 8,
            'iot_sensor': 6,
            'vehicle': 4,
            'base_station_6g': 3,
            'edge_server': 2
        }
    }
    
    print("üöÄ Starting Real NS-3 Integrated Blockchain Simulation")
    print("=" * 70)
    print(f"üìÇ NS-3 Directory: {ns3_dir}")
    print(f"‚è±Ô∏è Duration: {config.duration}s")
    print(f"üîÑ Sync Interval: {config.sync_interval}s")
    print("=" * 70)
    
    # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
    simulation = IntegratedNS3DeviceSimulation(config)
    simulation.initialize(ns3_config, device_config)
    
    try:
        simulation.run_simulation()
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results = simulation.get_results()
        print("\nüéØ Real NS-3 Integrated Simulation Results:")
        print("=" * 50)
        for key, value in results.items():
            if isinstance(value, dict):
                print(f"  {key}:")
                for k, v in value.items():
                    print(f"    {k}: {v}")
            else:
                print(f"  {key}: {value}")
        
        print("\n‚úÖ Real data integration features:")
        print("  ‚Ä¢ Position data from NS-3 node_positions.csv")
        print("  ‚Ä¢ Network metrics from NS-3 flow-monitor.xml")
        print("  ‚Ä¢ Zone transitions based on real mobility")
        print("  ‚Ä¢ RSSI calculation from actual positions")
        print("  ‚Ä¢ Packet loss from real network flows")
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è Simulation stopped by user")
    except Exception as e:
        print(f"\n‚ùå Simulation failed: {e}")
        import traceback
        traceback.print_exc()
    
    print("\nüèÅ Simulation finished!")

if __name__ == "__main__":
    main() 