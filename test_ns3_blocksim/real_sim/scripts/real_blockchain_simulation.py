#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Real Blockchain Integration Simulation
–†–µ–∞–ª—å–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è C++ –±–ª–æ–∫—á–µ–π–Ω –º–æ–¥—É–ª—è —Å Python —Å–∏–º—É–ª—è—Ü–∏–µ–π NS-3
"""

import sys
import os
import time
import argparse
import json
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º –ø—Ä–æ–µ–∫—Ç–∞
current_dir = Path(__file__).parent
project_root = current_dir.parent.parent
real_sim_root = current_dir.parent

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ NS-3
ns3_dir = project_root / "external" / "ns-3"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

def setup_ns3_environment():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è NS-3 –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–ª–æ–∫—á–µ–π–Ω –º–æ–¥—É–ª–µ–º"""
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—É—Ç–∏ –¥–ª—è Python bindings
    python_bindings_path = ns3_dir / "build" / "bindings" / "python"
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PYTHONPATH
    if 'PYTHONPATH' in os.environ:
        os.environ['PYTHONPATH'] = f"{python_bindings_path}:{os.environ['PYTHONPATH']}"
    else:
        os.environ['PYTHONPATH'] = str(python_bindings_path)
    # –î–æ–±–∞–≤–ª—è–µ–º –≤ sys.path –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    if str(python_bindings_path) not in sys.path:
        sys.path.insert(0, str(python_bindings_path))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º NS-3
    lib_path = ns3_dir / "build" / "lib"
    if 'LD_LIBRARY_PATH' in os.environ:
        os.environ['LD_LIBRARY_PATH'] = f"{lib_path}:{os.environ['LD_LIBRARY_PATH']}"
    else:
        os.environ['LD_LIBRARY_PATH'] = str(lib_path)
    
    # Configure Cppyy include path for NS-3 headers to allow Python bindings to find module headers
    include_dir = ns3_dir / "build" / "include"
    # Create symlinks for module headers expected by Cppyy (e.g., libnsns-3.44-<module>-module.h)
    include_ns_dir = include_dir / "ns3"
    version_file = ns3_dir / "VERSION"
    if version_file.exists():
        version_line = version_file.read_text().strip()
        try:
            ver = version_line.split("-", 1)[1]
            for h in include_ns_dir.glob("*-module.h"):
                link = include_ns_dir / f"libnsns-{ver}-{h.name}"
                if not link.exists():
                    link.symlink_to(h.name)
                    print(f"   üîó Symlink created: {link}")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Failed to create Cppyy header symlinks: {e}")
    try:
        import cppyy
        cppyy.add_include_path(str(include_dir))
        print(f"   üìñ Cppyy include path added: {include_dir}")
    except ImportError:
        print(f"   ‚ö†Ô∏è  cppyy not installed; cannot configure include path for Python bindings")
    
    print(f"   üîß NS-3 directory: {ns3_dir}")
    print(f"   üêç Python bindings: {python_bindings_path}")
    print(f"   üìö Library path: {lib_path}")
    
    return ns3_dir

def run_real_blockchain_simulation(scenario: str, duration: int, output_dir: str) -> dict:
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–π –±–ª–æ–∫—á–µ–π–Ω —Å–∏–º—É–ª—è—Ü–∏–∏ —Å C++ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π"""
    print(f"üåê Running Real Blockchain Simulation with C++ Integration...")
    print(f"   ‚è±Ô∏è  Duration: {duration} seconds")
    print(f"   üéØ Scenario: {scenario}")
    print(f"   üìÇ Output: {output_dir}")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ NS-3 –æ–∫—Ä—É–∂–µ–Ω–∏—è
    ns3_dir = setup_ns3_environment()
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º NS-3 –º–æ–¥—É–ª–∏ (—Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è)
        from ns import ns
        print("   ‚úÖ Successfully imported NS-3 core")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ blockchain –∫–ª–∞—Å—Å–æ–≤
        required_classes = ['CrossZoneBlockchainApp', 'CrossZoneBlockchainHelper', 'ZoneManager', 'BlockchainLedger']
        for cls_name in required_classes:
            if hasattr(ns, cls_name):
                print(f"   ‚úÖ {cls_name} found in ns module")
            else:
                print(f"   ‚ùå {cls_name} NOT found in ns module")
                return {"error": f"Missing blockchain class: {cls_name}"}
        
    except ImportError as e:
        print(f"   ‚ùå Failed to import NS-3 modules: {e}")
        print("   üîß Please ensure blockchain module is built with: ./ns3 build")
        return {"error": str(e)}
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å—Ü–µ–Ω–∞—Ä–∏—è
    scenario_config = {
        'small_campus': {'nodes': 10, 'validators': 3},
        'medium_district': {'nodes': 15, 'validators': 4}, 
        'large_city': {'nodes': 25, 'validators': 6},
        'stress_test': {'nodes': 50, 'validators': 10}
    }
    
    config = scenario_config.get(scenario, scenario_config['medium_district'])
    total_nodes = config['nodes']
    validator_count = config['validators']
    
    print(f"   üìä Configuration: {total_nodes} nodes, {validator_count} validators")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —É–∑–ª–æ–≤
    print("   üîß Creating network nodes...")
    nodes = ns.NodeContainer()
    nodes.Create(total_nodes)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–±–∏–ª—å–Ω–æ—Å—Ç–∏
    print("   üìç Setting up mobility models...")
    mobility = ns.MobilityHelper()
    
    # –ú–æ–±–∏–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —É–∑–ª–æ–≤ –≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–æ–π –æ–±–ª–∞—Å—Ç–∏
    mobility.SetPositionAllocator("ns3::RandomRectanglePositionAllocator",
                                 "X", ns.StringValue("ns3::UniformRandomVariable[Min=0|Max=300]"),
                                 "Y", ns.StringValue("ns3::UniformRandomVariable[Min=0|Max=300]"))
    mobility.SetMobilityModel("ns3::RandomDirection2dMobilityModel",
                             "Bounds", ns.RectangleValue(ns.Rectangle(0, 300, 0, 300)),
                             "Speed", ns.StringValue("ns3::UniformRandomVariable[Min=1.0|Max=5.0]"),
                             "Pause", ns.StringValue("ns3::UniformRandomVariable[Min=0.0|Max=2.0]"))
    mobility.Install(nodes)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ WiFi Ad-Hoc —Å–µ—Ç–∏
    print("   üì° Setting up WiFi Ad-Hoc network...")
    wifi = ns.WifiHelper()
    wifi.SetStandard(ns.WIFI_STANDARD_80211n)
    
    mac = ns.WifiMacHelper()
    mac.SetType("ns3::AdhocWifiMac")
    
    phy = ns.YansWifiPhyHelper()
    channel = ns.YansWifiChannelHelper.Default()
    phy.SetChannel(channel.Create())
    
    devices = wifi.Install(phy, mac, nodes)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–µ–∫–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ—Ç–æ–∫–æ–ª–æ–≤ —Å AODV –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π
    print("   üåê Setting up Internet stack with AODV routing...")
    aodv = ns.AodvHelper()
    internet = ns.InternetStackHelper()
    internet.SetRoutingHelper(aodv)
    internet.Install(nodes)
    
    # –ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–æ–≤
    address = ns.Ipv4AddressHelper()
    address.SetBase("10.1.1.0", "255.255.255.0")
    interfaces = address.Assign(devices)
    
    # –†–ï–ê–õ–¨–ù–ê–Ø –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø C++ –ë–õ–û–ö–ß–ï–ô–ù –ú–û–î–£–õ–Ø!
    print("   ‚õìÔ∏è  Setting up REAL C++ blockchain integration...")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–∫—á–µ–π–Ω helper
    blockchain_helper = ns.CrossZoneBlockchainHelper()
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–æ–Ω –∏ –ø–æ–∑–∏—Ü–∏–π
    blockchain_helper.ConfigureZones()
    # –†–∞—Å—Å—Ç–∞–Ω–æ–≤–∫–∞ —É–∑–ª–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ü–µ–Ω–∞—Ä–∏—é
    blockchain_helper.ConfigureNodePositions(nodes, scenario)
    # –ü–æ–ª—É—á–∞–µ–º zone manager
    zone_manager = blockchain_helper.GetZoneManager()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–ª–æ–∫—á–µ–π–Ω–∞
    blockchain_helper.SetAttribute("TransactionInterval", ns.TimeValue(ns.Seconds(1.0)))
    blockchain_helper.SetAttribute("Port", ns.UintegerValue(7000))
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ –±–ª–æ–∫—á–µ–π–Ω–∞
    blockchain_helper.SetAttribute("BlockInterval", ns.TimeValue(ns.Seconds(1.0)))
    # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∑–æ–Ω ---
    blockchain_helper.SetAttribute("SixGRadius", ns.DoubleValue(100.0))
    blockchain_helper.SetAttribute("BridgeRadius", ns.DoubleValue(150.0))
    blockchain_helper.SetAttribute("TowerPosition", ns.VectorValue(ns.Vector(150.0, 150.0, 30.0)))
    # --- –ö–æ–Ω–µ—Ü –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤ ---
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–ª–æ–∫—á–µ–π–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –Ω–∞ –≤—Å–µ —É–∑–ª—ã
    print("   üöÄ Installing blockchain applications...")
    blockchain_apps = blockchain_helper.Install(nodes)
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–≤
    blockchain_helper.SetupValidators(nodes, validator_count)
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Gateway Discovery –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –≤—Å–µ —É–∑–ª—ã
    print("   üåâ Installing gateway discovery protocol on nodes...")
    gw_helper = ns.GatewayDiscoveryHelper()
    gw_helper.Install(nodes)
    
    blockchain_apps.Start(ns.Seconds(1.0))
    blockchain_apps.Stop(ns.Seconds(float(duration)))
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∏
    print("   üìä Setting up tracing...")
    
    # ASCII —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞
    ascii_file = output_dir + "/blockchain-trace.tr"
    ascii_helper = ns.AsciiTraceHelper()
    ascii_stream = ascii_helper.CreateFileStream(ascii_file)
    
    # PCAP —Ç—Ä–∞—Å—Å–∏—Ä–æ–≤–∫–∞ 
    pcap_prefix = output_dir + "/blockchain"
    phy.EnablePcapAll(pcap_prefix)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è NS-3
    ns.LogComponentEnable("CrossZoneBlockchainApp", ns.LOG_LEVEL_INFO)
    ns.LogComponentEnable("ZoneManager", ns.LOG_LEVEL_INFO)
    ns.LogComponentEnable("BlockchainLedger", ns.LOG_LEVEL_INFO)
    
    print("   üé¨ Starting REAL blockchain simulation...")
    start_time = time.time()
    # –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –¥–æ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    ns.Simulator.Stop(ns.Seconds(float(duration)))
    ns.Simulator.Run()
    
    simulation_time = time.time() - start_time
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    print("   üìà Collecting blockchain statistics...")
    
    # –°–±–æ—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π
    total_tx_sent = 0
    total_tx_received = 0
    total_blocks_created = 0
    
    for i in range(total_nodes):
        app = blockchain_apps.Get(i)
        stats = app.GetStatistics()
        total_tx_sent += stats.tx_sent
        total_tx_received += stats.tx_received  
        total_blocks_created += stats.blocks_created
    
    print(f"   ‚úÖ REAL BLOCKCHAIN SIMULATION COMPLETED!")
    print(f"   ‚è±Ô∏è  Execution time: {simulation_time:.1f}s")
    
    # –û—á–∏—Å—Ç–∫–∞
    ns.Simulator.Destroy()
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    results = {
        "simulation_duration": duration,
        "scenario": scenario,
        "simulation_time": simulation_time,
        "real_cpp_integration": True,
        "blockchain_stats": {
            "total_transactions_sent": total_tx_sent,
            "total_transactions_received": total_tx_received,
            "total_blocks_created": total_blocks_created,
            "validator_count": validator_count
        },
        "trace_files": {
            "ascii": ascii_file,
            "pcap": pcap_prefix
        },
        "network_config": {
            "total_nodes": total_nodes,
            "validators": validator_count,
            "routing": "AODV",
            "wifi_standard": "802.11n",
            "simulation_area": "300x300m",
            "tower_position": [150.0, 150.0, 30.0]
        }
    }
    
    # Results printed by C++ NS_LOG_UNCOND trace callbacks
    
    return results

def print_banner():
    """–ü–µ—á–∞—Ç—å –±–∞–Ω–Ω–µ—Ä–∞ —Å–∏–º—É–ª—è—Ü–∏–∏"""
    banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë         üöÄ REAL C++ BLOCKCHAIN INTEGRATION WITH NS-3 üöÄ                     ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  Features:                                                                   ‚ïë
‚ïë  ‚Ä¢ REAL C++ blockchain module integration (not Python simulation)           ‚ïë
‚ïë  ‚Ä¢ Cross-zone transaction handling (6G, Bridge, MANET)                      ‚ïë
‚ïë  ‚Ä¢ Actual UDP packet transmission with blockchain headers                   ‚ïë
‚ïë  ‚Ä¢ Real AODV routing for blockchain traffic                                 ‚ïë
‚ïë  ‚Ä¢ Validator consensus with zone management                                 ‚ïë
‚ïë  ‚Ä¢ Complete PCAP/ASCII tracing of blockchain traffic                        ‚ïë
‚ïë                                                                              ‚ïë
‚ïë  üîó NS-3 C++ ‚ü∑ Python Integration ‚ü∑ Analytics                            ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """
    print(banner)

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(description="Real C++ Blockchain Integration with NS-3")
    
    parser.add_argument("--scenario", 
                       choices=["small_campus", "medium_district", "large_city", "stress_test"],
                       default="small_campus",
                       help="Simulation scenario")
    
    parser.add_argument("--duration", type=int, default=30,
                       help="Simulation duration in seconds")
    
    parser.add_argument("--output-dir", default="results",
                       help="Output directory for results")
    
    parser.add_argument("--test-integration", action="store_true",
                       help="Run integration test before simulation")
    
    args = parser.parse_args()
    
    print_banner()
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    output_dir = os.path.abspath(args.output_dir)
    os.makedirs(output_dir, exist_ok=True)
    
    try:
        # –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏–º—É–ª—è—Ü–∏–∏
        results = run_real_blockchain_simulation(args.scenario, args.duration, output_dir)
        
        if "error" in results:
            logger.error(f"‚ùå SIMULATION FAILED: {results['error']}")
            return 1
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        results_file = os.path.join(output_dir, "blockchain_simulation_results.json")
        with open(results_file, 'w') as f:
            json.dump(results, f, indent=2)
        
        # –í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        print("\n" + "=" * 80)
        print("üéâ REAL C++ BLOCKCHAIN INTEGRATION SIMULATION COMPLETED!")
        print("=" * 80)
        
        print(f"\n‚è±Ô∏è  TIMING:")
        print(f"   ‚Ä¢ Total simulation time: {results['simulation_time']:.1f}s")
        print(f"   ‚Ä¢ Simulated time: {results['simulation_duration']}s")
        
        print(f"\n‚õìÔ∏è  BLOCKCHAIN STATISTICS:")
        for key, value in results['blockchain_stats'].items():
            print(f"   ‚Ä¢ {key}: {value}")
        
        print(f"\nüìä TRACE FILES:")
        print(f"   ‚Ä¢ ASCII Trace: {results['trace_files']['ascii']}")
        print(f"   ‚Ä¢ PCAP Trace: {results['trace_files']['pcap']}")
        
        print(f"\nüéØ REAL INTEGRATION FEATURES:")
        print(f"   ‚úÖ C++ blockchain module compiled and integrated")
        print(f"   ‚úÖ Real UDP packet transmission with blockchain headers")
        print(f"   ‚úÖ Actual AODV routing of blockchain traffic")
        print(f"   ‚úÖ Zone-based validator management")
        print(f"   ‚úÖ Complete network trace capture")
        print(f"   ‚úÖ Python-C++ bidirectional integration")
        
        print("=" * 80)
        
        return 0
        
    except Exception as e:
        logger.error(f"‚ùå REAL BLOCKCHAIN SIMULATION FAILED: {e}")
        import traceback
        traceback.print_exc()
        return 1

if __name__ == "__main__":
    sys.exit(main()) 