#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
—Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–æ–Ω (5G_Zone, MANET_Zone, Bridge_Zone)
"""

import sys
import json
import logging
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –º–æ–¥—É–ª—è–º
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir / "src"))
sys.path.insert(0, str(current_dir / "scripts"))

try:
    from executive_dashboard_analyzer import ExecutiveDashboardAnalyzer
    from dashboard_visualizer import DashboardVisualizer
    from generate_executive_analytics import ExecutiveAnalyticsGenerator
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_updated_analytics():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    generator = ExecutiveAnalyticsGenerator(output_dir="results/test_updated")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π
    print("üìä –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    sample_data = generator._generate_sample_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    print(f"‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: {len(sample_data['devices'])}")
    print(f"   - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–∏–º—É–ª—è—Ü–∏–∏: {len(sample_data['simulation_config'])} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∑–æ–Ω–∞–º
    zone_counts = {}
    for device in sample_data['devices']:
        zone = device['current_zone']
        zone_counts[zone] = zone_counts.get(zone, 0) + 1
    
    print(f"   - –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∑–æ–Ω–∞–º:")
    for zone, count in zone_counts.items():
        percentage = (count / len(sample_data['devices'])) * 100
        print(f"     * {zone}: {count} —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ({percentage:.1f}%)")
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    print("\nüîç –°–æ–∑–¥–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞...")
    analyzer = ExecutiveDashboardAnalyzer(sample_data)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑ –∑–æ–Ω
    print("\nüìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∑–æ–Ω...")
    zone_analysis = analyzer.analyze_zone_distribution()
    
    print(f"‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω:")
    print(f"   - –í—Å–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: {zone_analysis['total_devices']}")
    print(f"   - –ó–æ–Ω—ã: {list(zone_analysis['zone_counts'].keys())}")
    
    for zone, percentage in zone_analysis['zone_percentages'].items():
        performance = zone_analysis['zone_performance'][zone]
        print(f"   - {zone}: {percentage:.1f}% (Score: {performance['performance_score']:.1f})")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
    print("\nüìà –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...")
    try:
        summary = analyzer.generate_executive_summary()
        print("‚úÖ –ü–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –í—ã–≤–æ–¥–∏–º –∫–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        print(f"\nüìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏:")
        print(f"   - –ó–¥–æ—Ä–æ–≤—å–µ —Å–µ—Ç–∏: {summary['network_health']['score']:.1f}")
        print(f"   - –≠–Ω–µ—Ä–≥–æ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {summary['energy_efficiency']['efficiency_percentage']:.1f}%")
        print(f"   - –£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {summary['key_performance_indicators']['transactions']['success_rate']:.1f}%")
        print(f"   - –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {summary['simulation_overview']['overall_performance_rating']}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é
    print("\nüé® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏...")
    try:
        visualizer = DashboardVisualizer(output_dir="results/test_updated")
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞—à–±–æ—Ä–¥
        dashboard_path = visualizer.create_executive_dashboard(summary)
        print(f"‚úÖ –î–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω: {dashboard_path}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥
        interactive_path = visualizer.create_interactive_dashboard(summary)
        print(f"‚úÖ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –¥–∞—à–±–æ—Ä–¥ —Å–æ–∑–¥–∞–Ω: {interactive_path}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return False
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_results = {
        'test_status': 'SUCCESS',
        'zone_analysis': zone_analysis,
        'summary_metrics': {
            'network_health': summary['network_health']['score'],
            'energy_efficiency': summary['energy_efficiency']['efficiency_percentage'],
            'transaction_success': summary['key_performance_indicators']['transactions']['success_rate'],
            'overall_rating': summary['simulation_overview']['overall_performance_rating']
        },
        'files_created': [
            str(dashboard_path),
            str(interactive_path)
        ]
    }
    
    results_file = Path("results/test_updated/test_results.json")
    results_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(results_file, 'w', encoding='utf-8') as f:
        json.dump(test_results, f, indent=2, ensure_ascii=False)
    
    print(f"\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {results_file}")
    print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        success = test_updated_analytics()
        if success:
            print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
            print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 scripts/generate_executive_analytics.py")
        else:
            print("\n‚ùå –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–æ")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 